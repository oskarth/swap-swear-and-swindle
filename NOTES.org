#+TITLE: Notes

* December 21
Want to deploy SimpleSwap through SimpleSwapFactory.

deploy vs new: both are used to deploy contract. Deploy is a singleton and can
be accessed with `MyContract.deployed()` New is used to avoid side effects in
tests, and similar.

Setting issuer with accounts[0].

When deploying SimpleSwap, this is done through SimpleSwapFactory to keep state.
This means it doesn't show up as a deployed contract in Ganache. It is visible
in logs though.

How do I interact with SimpleSwap?

We can get access to SimpleSwapFactory through REPL with:

var contract = await SimpleSwapFactory.at(SimpleSwapFactory.address)

It is async...need to await, but it isn't a promise for some backwards
compatible reason so it seems like you can just assign it. Not the case.

var foo = await ERC20Token("0x3d84f98d14a7ccd313a47a067eb934cae8d6b48e")

Let's deposit some money here (as A). Then we want another account (B) to redeem
cheque. This should send money to B swap, or alternative to B address directly.

A should also be able to withdraw directly from contract, assuming no hard
deposit has been set.

Just transfer to that contract address and balance should increase. Need to
first mint with ERC20 token contract first I believe. Let's revisit.

* Misc imported notes

To re-run migrations we use `truffle migrate --reset`.

Ganache GUI is running on 7545.

Mind the gas limit, can be set as command line argument `npx ganache-cli -l
10000000` or in Ganache UI.

The goal is to get end to end cheque sending etc working. This requires:

- ERC20 token
- SimpleSwapFactory
- SimpleSwap

And then some interactive use of these.

To get contract creation code we can fire up a node REPL and do:
`web3.eth.getCode("0x9A370560A64f9Bd7a7BB63CCc41162A52aa33096")`. This will show
contract code and constructor code for SimpleSwapFactory, which is 64
zero-padded address.

Initially tried doing this in nim-waku repo using nim-web3, but ran into issues
with not being able to have constructor take argument. See
https://github.com/status-im/nim-web3/issues/33

Instead, doing it in this repository first to see end to end flow. Doing it with
Ganache for simplicity first. Later on this can use Goerli or similar.
